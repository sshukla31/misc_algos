class HeapSort(object):
    def __init__(self):
        pass

    def build_heap(self, queue):
        size = len(queue) - 1
        for index, val in enumerate(queue[ : -2]):
            import ipdb;ipdb.set_trace() 
            if val > queue[2 * (index + 1)]:
                print "swapping {}:{}".format(val, queue[2 * (index + 1)])
                queue[2 * (index + 1)], queue[index] = queue[index], queue[2 * (index + 1)]
            elif val > queue[2 * (index + 2)]:
                print "swapping {}:{}".format(val, queue[2 * (index + 2)])
                queue[2 * (index + 2)], queue[index] = queue[index], queue[2 * (index + 2)]








def main():
    number_list = [10, 1, 4, 2, 7, 6, 9, 0, 3]
    heap = HeapSort()
    heap.build_heap(number_list)
    print number_list


if __name__ == '__main__':
    main()
