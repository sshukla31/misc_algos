# Binary Search Tree code.
# Author: Sandeep Shukla
# Date: 05/16/2014


class Node(object):
    """ Define node creation methods """
    def __init__(self, data):
        """ Intialize new node """
        self.data = data
        self.left = None
        self.right = None

class BinaryTree(object):
    """ Define methods to insert node and print nodes in pre, post and in order """

    def __init__(self):
        """ Initialize root """
        self.root = None

    def insert(self, value):
        """ Insert node in the tree """
        new_node = Node(value)
        if self.root is None:
            self.root = new_node
        else:
            node = self.root
            while(node!=None):
                if(value <= node.data):
                    if node.left is None:
                        node.left = new_node
                        node = node.left
                    node = node.left
                elif(value > node.data):
                    if node.right is None:
                        node.right = new_node
                        node = node.right
                    node = node.right

    def search(self, value):
        found = False
        node = self.root
        while(node != None and found == False) :
            if(value == node.value):
                found = True
            elif(value < node.value):
                if node.left is not None:
                    node = node.left
            else:
                if node.right is not None:
                    node = node.right

        print "Value found: {}".format(str(value)) if found else "Value not found: {}".format(str(value))


    def print_inorder(self, node):
        """ Print tree in-order """
        if node is not None:
            self.print_inorder(node.left)
            print node.data
            self.print_inorder(node.right)

    def print_preorder(self, node):
        """ Print tree pre-order """
        if node is not None:
            print node.data
            self.print_preorder(node.left)
            self.print_preorder(node.right)

    def print_postorder(self, node):
        """ Print tree post-order """
        if node is not None:
            self.print_postorder(node.left)
            self.print_postorder(node.right)
            print node.data



if __name__ == '__main__':
    binary_tree = BinaryTree()
    for value in [5, 2, 1, 9, 0, 6]:
        binary_tree.insert(value)
    binary_tree.search(5)
    binary_tree.search(10)
    print "In-order----"
    binary_tree.print_inorder(binary_tree.root)
    print "Pre-order----"
    binary_tree.print_preorder(binary_tree.root)
    print "Post-order----"
    binary_tree.print_postorder(binary_tree.root)
